package com.cqvip.mobilevers.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqvip.mobilevers.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Realname = new Property(3, String.class, "realname", false, "REALNAME");
        public final static Property Testingcount = new Property(4, Integer.class, "testingcount", false, "TESTINGCOUNT");
        public final static Property Testedcount = new Property(5, Integer.class, "testedcount", false, "TESTEDCOUNT");
        public final static Property Favoritescount = new Property(6, Integer.class, "favoritescount", false, "FAVORITESCOUNT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERID' TEXT," + // 1: userid
                "'NAME' TEXT," + // 2: name
                "'REALNAME' TEXT," + // 3: realname
                "'TESTINGCOUNT' INTEGER," + // 4: testingcount
                "'TESTEDCOUNT' INTEGER," + // 5: testedcount
                "'FAVORITESCOUNT' INTEGER);"); // 6: favoritescount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(4, realname);
        }
 
        Integer testingcount = entity.getTestingcount();
        if (testingcount != null) {
            stmt.bindLong(5, testingcount);
        }
 
        Integer testedcount = entity.getTestedcount();
        if (testedcount != null) {
            stmt.bindLong(6, testedcount);
        }
 
        Integer favoritescount = entity.getFavoritescount();
        if (favoritescount != null) {
            stmt.bindLong(7, favoritescount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realname
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // testingcount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // testedcount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // favoritescount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestingcount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTestedcount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFavoritescount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
