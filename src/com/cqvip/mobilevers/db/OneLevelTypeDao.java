package com.cqvip.mobilevers.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqvip.mobilevers.db.OneLevelType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ONE_LEVEL_TYPE.
*/
public class OneLevelTypeDao extends AbstractDao<OneLevelType, Long> {

    public static final String TABLENAME = "ONE_LEVEL_TYPE";

    /**
     * Properties of entity OneLevelType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Examtypeid = new Property(1, Integer.class, "examtypeid", false, "EXAMTYPEID");
        public final static Property Count = new Property(2, Integer.class, "count", false, "COUNT");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Haschildren = new Property(4, Boolean.class, "haschildren", false, "HASCHILDREN");
    };


    public OneLevelTypeDao(DaoConfig config) {
        super(config);
    }
    
    public OneLevelTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ONE_LEVEL_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EXAMTYPEID' INTEGER UNIQUE ," + // 1: examtypeid
                "'COUNT' INTEGER," + // 2: count
                "'TITLE' TEXT," + // 3: title
                "'HASCHILDREN' INTEGER);"); // 4: haschildren
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ONE_LEVEL_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OneLevelType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer examtypeid = entity.getExamtypeid();
        if (examtypeid != null) {
            stmt.bindLong(2, examtypeid);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Boolean haschildren = entity.getHaschildren();
        if (haschildren != null) {
            stmt.bindLong(5, haschildren ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OneLevelType readEntity(Cursor cursor, int offset) {
        OneLevelType entity = new OneLevelType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // examtypeid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // haschildren
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OneLevelType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExamtypeid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHaschildren(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OneLevelType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OneLevelType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
